/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ventExTyscvZpogFdoiw6H
// Component: QZOzF_lZac
import * as React from "react";
import {
  hasVariant,
  createPlasmicElement,
  RenderOpts,
  Override,
  classNames,
  Flex,
  RenderFunc,
  RenderFuncOverrides,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg
} from "@plasmicapp/react-web";
import Spacer from "../../Spacer"; // plasmic-import: iR_D-S5WQ8/component
import Input from "../../Input"; // plasmic-import: J0L08V-7zH/component
import ValidationResultIcon from "../../ValidationResultIcon"; // plasmic-import: jOfkMhICa7/component
import StreamlineIconsLink from "../../StreamlineIconsLink"; // plasmic-import: 8Pj7c1BH86/component

import { ScreenContext, ScreenValue } from "../PlasmicGlobalVariant__Screen"; // plasmic-import: vGne0rgn89CPN/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_cloudflare_ip_checker.css"; // plasmic-import: ventExTyscvZpogFdoiw6H/projectcss
import "./PlasmicMainPage.css"; // plasmic-import: QZOzF_lZac/css
import FlourishTopLeftsvgIcon from "./PlasmicIcon__FlourishTopLeftsvg"; // plasmic-import: pxSJGNxRG/icon
import FlourishRightsvgIcon from "./PlasmicIcon__FlourishRightsvg"; // plasmic-import: OIUKwqcWP/icon

export type PlasmicMainPage__VariantsArgs = {};

export type PlasmicMainPage__ArgsType = {
  input?: React.ReactNode;
  validationResult?: React.ReactNode;
  children?: React.ReactNode;
};

const PlasmicMainPage__RenderFuncs = {
  root: (
    opts: RenderOpts<
      PlasmicMainPage__VariantsArgs,
      PlasmicMainPage__ArgsType,
      {
        root?: Flex<"div">;
        row?: Flex<"div">;
        validationResultIcon?: Flex<typeof ValidationResultIcon>;
        streamlineIconsLink?: Flex<typeof StreamlineIconsLink>;
      }
    >
  ): React.ReactNode => {
    return <PlasmicMainPage__FCs.root opts={opts} />;
  },
  children: (
    opts: RenderOpts<
      PlasmicMainPage__VariantsArgs,
      PlasmicMainPage__ArgsType,
      {}
    >
  ): React.ReactNode => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <PlasmicSlot
        defaultContents={"Cloudflare IP Address Checker"}
        value={args.children}
        className={classNames({
          "MainPage__children--baseLg___em0-kyhk3_2ebQ8": true,
          "MainPage__children___em0-": true
        })}
      />
    );
  },
  row: (
    opts: RenderOpts<
      PlasmicMainPage__VariantsArgs,
      PlasmicMainPage__ArgsType,
      {
        row?: Flex<"div">;
        validationResultIcon?: Flex<typeof ValidationResultIcon>;
      }
    >
  ): React.ReactNode => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <div
        data-plasmic-override={overrides.row}
        className={classNames({
          "MainPage__row--baseLg__DHOnckyhk3_2ebQ8": true,
          MainPage__row__DHOnc: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        <PlasmicSlot
          defaultContents={
            <Input
              className={classNames({
                MainPage__input__uz321: true,
                __wab_instance: true
              })}
              placeholder={"e.g. 101.103.104.105" as const}
              {...({} as any)}
            ></Input>
          }
          value={args.input}
        />

        <Spacer
          className={classNames({
            "MainPage__spacer--baseLg__UNsOBkyhk3_2ebQ8": true,
            MainPage__spacer__UNsOB: true,
            __wab_instance: true
          })}
          {...({} as any)}
        ></Spacer>

        {PlasmicMainPage__RenderFuncs.validationResult({
          variants,
          args,
          overrides
        })}
      </div>
    );
  },
  validationResult: (
    opts: RenderOpts<
      PlasmicMainPage__VariantsArgs,
      PlasmicMainPage__ArgsType,
      {
        validationResultIcon?: Flex<typeof ValidationResultIcon>;
      }
    >
  ): React.ReactNode => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <PlasmicSlot
        defaultContents={PlasmicMainPage__RenderFuncs.validationResultIcon({
          variants,
          args,
          overrides
        })}
        value={args.validationResult}
      />
    );
  },
  validationResultIcon: (
    opts: RenderOpts<
      PlasmicMainPage__VariantsArgs,
      PlasmicMainPage__ArgsType,
      {
        validationResultIcon?: Flex<typeof ValidationResultIcon>;
      }
    >
  ): React.ReactNode => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <ValidationResultIcon
        data-plasmic-override={overrides.validationResultIcon}
        className={classNames({
          MainPage__validationResultIcon__kaq7Q: true,
          __wab_instance: true
        })}
        {...({} as any)}
      ></ValidationResultIcon>
    );
  },
  streamlineIconsLink: (
    opts: RenderOpts<
      PlasmicMainPage__VariantsArgs,
      PlasmicMainPage__ArgsType,
      {
        streamlineIconsLink?: Flex<typeof StreamlineIconsLink>;
      }
    >
  ): React.ReactNode => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <StreamlineIconsLink
        data-plasmic-override={overrides.streamlineIconsLink}
        className={classNames({
          "MainPage__streamlineIconsLink--baseLg__2DL19kyhk3_2ebQ8": true,
          MainPage__streamlineIconsLink__2DL19: true,
          __wab_instance: true
        })}
        {...({} as any)}
      ></StreamlineIconsLink>
    );
  }
};

const PlasmicMainPage__FCs = {
  root: ((props: {
    opts: Parameters<typeof PlasmicMainPage__RenderFuncs["root"]>[0];
  }) => {
    const { opts } = props;
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};

    const globalVariants = {
      screen: React.useContext(ScreenContext)
    };

    return (
      <div
        data-plasmic-override={overrides.root}
        className={classNames({
          "MainPage__root--baseLg__Jvatskyhk3_2ebQ8": true,
          MainPage__root__Jvats: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {(true && hasVariant(globalVariants, "screen", "lg")
          ? false
          : false) && (
          <FlourishTopLeftsvgIcon
            className={classNames({
              "MainPage__svg--baseLg__6j-UJkyhk3_2ebQ8": true,
              "MainPage__svg__6j-UJ": true,
              "plasmic-default__all": true,
              "plasmic-default__svg": true
            })}
            role={"img"}
            {...({} as any)}
          ></FlourishTopLeftsvgIcon>
        )}

        <FlourishTopLeftsvgIcon
          className={classNames({
            "MainPage__svg--baseLg___cjbfkyhk3_2ebQ8": true,
            MainPage__svg___cjbf: true,
            "plasmic-default__all": true,
            "plasmic-default__svg": true
          })}
          role={"img"}
          {...({} as any)}
        ></FlourishTopLeftsvgIcon>

        <FlourishRightsvgIcon
          className={classNames({
            "MainPage__svg--baseLg__FbR9Ykyhk3_2ebQ8": true,
            MainPage__svg__FbR9Y: true,
            "plasmic-default__all": true,
            "plasmic-default__svg": true
          })}
          role={"img"}
          {...({} as any)}
        ></FlourishRightsvgIcon>

        <div
          className={classNames({
            "MainPage__box--baseLg__x2AV6kyhk3_2ebQ8": true,
            MainPage__box__x2AV6: true,
            "plasmic-default__all": true,
            "plasmic-default__div": true
          })}
        >
          {PlasmicMainPage__RenderFuncs.children({
            variants,
            args,
            overrides
          })}

          <Spacer
            className={classNames({
              "MainPage__spacer--baseLg__YbT1vkyhk3_2ebQ8": true,
              MainPage__spacer__YbT1v: true,
              __wab_instance: true
            })}
            {...({} as any)}
          ></Spacer>

          {PlasmicMainPage__RenderFuncs.row({
            variants,
            args,
            overrides
          })}

          <Spacer
            className={classNames({
              "MainPage__spacer--baseLg__bph0xkyhk3_2ebQ8": true,
              MainPage__spacer__bph0x: true,
              __wab_instance: true
            })}
            {...({} as any)}
          ></Spacer>

          <div
            className={classNames({
              "MainPage__box--baseLg__OQQwTkyhk3_2ebQ8": true,
              MainPage__box__OQQwT: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            {"You can try Cloudflare IPv4 and IPv6 addresses like:"}
          </div>

          <div
            className={classNames({
              "MainPage__box--baseLg__lF4Ykkyhk3_2ebQ8": true,
              MainPage__box__lF4Yk: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            {"103.21.244.0"}
          </div>

          <div
            className={classNames({
              "MainPage__box--baseLg__48IsXkyhk3_2ebQ8": true,
              MainPage__box__48IsX: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            {"2400:cb00:0000::0000"}
          </div>

          <Spacer
            className={classNames({
              MainPage__spacer__YemuA: true,
              __wab_instance: true
            })}
            {...({} as any)}
          ></Spacer>

          <div
            className={classNames({
              "MainPage__box--baseLg__JWTH5kyhk3_2ebQ8": true,
              MainPage__box__JWTH5: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            {"You can also try ranges like:\n"}
          </div>

          <div
            className={classNames({
              "MainPage__box--baseLg__5f2vDkyhk3_2ebQ8": true,
              MainPage__box__5f2vD: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            {"108.162.192.0/18\n"}
          </div>

          <div
            className={classNames({
              "MainPage__box--baseLg__YfoW8kyhk3_2ebQ8": true,
              MainPage__box__YfoW8: true,
              "plasmic-default__all": true,
              "plasmic-default__div": true
            })}
          >
            {"2405:8100::/32"}
          </div>
        </div>

        {PlasmicMainPage__RenderFuncs.streamlineIconsLink({
          variants,
          args,
          overrides
        })}
      </div>
    ) as React.ReactElement;
  }) as React.FunctionComponent<{
    opts: Parameters<typeof PlasmicMainPage__RenderFuncs["root"]>[0];
  }>,

  children: undefined,
  row: undefined,
  validationResult: undefined,
  validationResultIcon: undefined,
  streamlineIconsLink: undefined
};

class PlasmicMainPage__Renderer extends Renderer<
  PlasmicMainPage__VariantsArgs,
  PlasmicMainPage__ArgsType,
  typeof PlasmicMainPage__RenderFuncs,
  "root"
> {
  constructor(
    variants: PlasmicMainPage__VariantsArgs,
    args: PlasmicMainPage__ArgsType
  ) {
    super(variants, args, PlasmicMainPage__RenderFuncs, "root");
  }

  protected create(
    variants: PlasmicMainPage__VariantsArgs,
    args: PlasmicMainPage__ArgsType
  ) {
    return new PlasmicMainPage__Renderer(variants, args);
  }

  getInternalVariantProps() {
    return [];
  }

  getInternalArgProps() {
    return ["input", "validationResult", "children"];
  }

  forNode(
    name: "root"
  ): NodeRenderer<typeof PlasmicMainPage__RenderFuncs["root"]>;
  forNode(
    name: "children"
  ): NodeRenderer<typeof PlasmicMainPage__RenderFuncs["children"]>;
  forNode(
    name: "row"
  ): NodeRenderer<typeof PlasmicMainPage__RenderFuncs["row"]>;
  forNode(
    name: "validationResult"
  ): NodeRenderer<typeof PlasmicMainPage__RenderFuncs["validationResult"]>;
  forNode(
    name: "validationResultIcon"
  ): NodeRenderer<typeof PlasmicMainPage__RenderFuncs["validationResultIcon"]>;
  forNode(
    name: "streamlineIconsLink"
  ): NodeRenderer<typeof PlasmicMainPage__RenderFuncs["streamlineIconsLink"]>;
  forNode(name: keyof typeof PlasmicMainPage__RenderFuncs) {
    return super.forNode(name);
  }
}

interface PlasmicMainPageRootProps {
  variants?: PlasmicMainPage__VariantsArgs;
  args?: Partial<PlasmicMainPage__ArgsType>;
  root?: Flex<"div">;
  row?: Flex<"div">;
  validationResultIcon?: Flex<typeof ValidationResultIcon>;
  streamlineIconsLink?: Flex<typeof StreamlineIconsLink>;
}

export const PlasmicMainPage = ((props: PlasmicMainPageRootProps) => {
  return new PlasmicMainPage__Renderer(props.variants || {}, props.args || {})
    .forNode("root")
    .withOverrides({
      root: props.root,
      row: props.row,
      validationResultIcon: props.validationResultIcon,
      streamlineIconsLink: props.streamlineIconsLink
    })
    .render();
}) as React.FunctionComponent<PlasmicMainPageRootProps> & {
  children: React.FunctionComponent<PlasmicMainPageChildrenProps>;
  row: React.FunctionComponent<PlasmicMainPageRowProps>;
  validationResult: React.FunctionComponent<
    PlasmicMainPageValidationResultProps
  >;

  validationResultIcon: React.FunctionComponent<
    PlasmicMainPageValidationResultIconProps
  >;

  streamlineIconsLink: React.FunctionComponent<
    PlasmicMainPageStreamlineIconsLinkProps
  >;

  createRenderer: () => PlasmicMainPage__Renderer;
};

interface PlasmicMainPageChildrenProps {
  variants?: PlasmicMainPage__VariantsArgs;
  args?: Partial<PlasmicMainPage__ArgsType>;
}

PlasmicMainPage.children = ((props: PlasmicMainPageChildrenProps) => {
  return new PlasmicMainPage__Renderer(props.variants || {}, props.args || {})
    .forNode("children")
    .withOverrides({})
    .render();
}) as React.FunctionComponent<PlasmicMainPageChildrenProps>;

interface PlasmicMainPageRowProps {
  variants?: PlasmicMainPage__VariantsArgs;
  args?: Partial<PlasmicMainPage__ArgsType>;
  row?: Flex<"div">;
  validationResultIcon?: Flex<typeof ValidationResultIcon>;
}

PlasmicMainPage.row = ((props: PlasmicMainPageRowProps) => {
  return new PlasmicMainPage__Renderer(props.variants || {}, props.args || {})
    .forNode("row")
    .withOverrides({
      row: props.row,
      validationResultIcon: props.validationResultIcon
    })
    .render();
}) as React.FunctionComponent<PlasmicMainPageRowProps>;

interface PlasmicMainPageValidationResultProps {
  variants?: PlasmicMainPage__VariantsArgs;
  args?: Partial<PlasmicMainPage__ArgsType>;
  validationResultIcon?: Flex<typeof ValidationResultIcon>;
}

PlasmicMainPage.validationResult = ((
  props: PlasmicMainPageValidationResultProps
) => {
  return new PlasmicMainPage__Renderer(props.variants || {}, props.args || {})
    .forNode("validationResult")
    .withOverrides({
      validationResultIcon: props.validationResultIcon
    })
    .render();
}) as React.FunctionComponent<PlasmicMainPageValidationResultProps>;

interface PlasmicMainPageValidationResultIconProps {
  variants?: PlasmicMainPage__VariantsArgs;
  args?: Partial<PlasmicMainPage__ArgsType>;
  validationResultIcon?: Flex<typeof ValidationResultIcon>;
}

PlasmicMainPage.validationResultIcon = ((
  props: PlasmicMainPageValidationResultIconProps
) => {
  return new PlasmicMainPage__Renderer(props.variants || {}, props.args || {})
    .forNode("validationResultIcon")
    .withOverrides({
      validationResultIcon: props.validationResultIcon
    })
    .render();
}) as React.FunctionComponent<PlasmicMainPageValidationResultIconProps>;

interface PlasmicMainPageStreamlineIconsLinkProps {
  variants?: PlasmicMainPage__VariantsArgs;
  args?: Partial<PlasmicMainPage__ArgsType>;
  streamlineIconsLink?: Flex<typeof StreamlineIconsLink>;
}

PlasmicMainPage.streamlineIconsLink = ((
  props: PlasmicMainPageStreamlineIconsLinkProps
) => {
  return new PlasmicMainPage__Renderer(props.variants || {}, props.args || {})
    .forNode("streamlineIconsLink")
    .withOverrides({
      streamlineIconsLink: props.streamlineIconsLink
    })
    .render();
}) as React.FunctionComponent<PlasmicMainPageStreamlineIconsLinkProps>;

PlasmicMainPage.createRenderer = () => new PlasmicMainPage__Renderer({}, {});

export default PlasmicMainPage;
/* prettier-ignore-end */
