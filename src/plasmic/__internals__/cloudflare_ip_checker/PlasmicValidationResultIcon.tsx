/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsx createPlasmicElementProxy */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ventExTyscvZpogFdoiw6H
// Component: jOfkMhICa7
import * as React from "react";
import {
  hasVariant,
  createPlasmicElement,
  RenderOpts,
  Override,
  classNames,
  Flex,
  RenderFunc,
  RenderFuncOverrides,
  wrapWithClassName,
  Renderer,
  NodeRenderer,
  createPlasmicElementProxy,
  makeFragment,
  PlasmicIcon,
  PlasmicSlot,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_cloudflare_ip_checker.css"; // plasmic-import: ventExTyscvZpogFdoiw6H/projectcss
import "./PlasmicValidationResultIcon.css"; // plasmic-import: jOfkMhICa7/css

export type PlasmicValidationResultIcon__VariantsArgs = {
  status?: SingleChoiceArg<"valid" | "invalid">;
};

export type PlasmicValidationResultIcon__ArgsType = {};

const PlasmicValidationResultIcon__RenderFuncs = {
  root: (
    opts: RenderOpts<
      PlasmicValidationResultIcon__VariantsArgs,
      PlasmicValidationResultIcon__ArgsType,
      {
        root?: Flex<"div">;
        box?: Flex<"div">;
      }
    >
  ): React.ReactNode => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <div
        data-plasmic-override={overrides.root}
        className={classNames({
          "ValidationResultIcon__root--baseLg__ZKgTJ_0xRi_2ebQ8": true,
          "ValidationResultIcon__root--invalid__ZKgTJ4YxMf": hasVariant(
            variants,
            "status",
            "invalid"
          ),

          "ValidationResultIcon__root--valid__ZKgTJnOGb8": hasVariant(
            variants,
            "status",
            "valid"
          ),

          ValidationResultIcon__root__ZKgTJ: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {PlasmicValidationResultIcon__RenderFuncs.box({
          variants,
          args,
          overrides
        })}
      </div>
    );
  },
  box: (
    opts: RenderOpts<
      PlasmicValidationResultIcon__VariantsArgs,
      PlasmicValidationResultIcon__ArgsType,
      {
        box?: Flex<"div">;
      }
    >
  ): React.ReactNode => {
    const variants = opts.variants || {};
    const args = opts.args || {};
    const overrides = opts.overrides || {};
    return (
      <div
        data-plasmic-override={overrides.box}
        className={classNames({
          "ValidationResultIcon__box--baseLg__oxI54_0xRi_2ebQ8": true,
          "ValidationResultIcon__box--invalid__oxI544YxMf": hasVariant(
            variants,
            "status",
            "invalid"
          ),

          "ValidationResultIcon__box--valid__oxI54nOGb8": hasVariant(
            variants,
            "status",
            "valid"
          ),

          ValidationResultIcon__box__oxI54: true,
          "plasmic-default__all": true,
          "plasmic-default__div": true
        })}
      >
        {hasVariant(variants, "status", "invalid")
          ? "✗"
          : hasVariant(variants, "status", "valid")
          ? "✓"
          : "?"}
      </div>
    );
  }
};

const PlasmicValidationResultIcon__FCs = {
  root: undefined,
  box: undefined
};

class PlasmicValidationResultIcon__Renderer extends Renderer<
  PlasmicValidationResultIcon__VariantsArgs,
  PlasmicValidationResultIcon__ArgsType,
  typeof PlasmicValidationResultIcon__RenderFuncs,
  "root"
> {
  constructor(
    variants: PlasmicValidationResultIcon__VariantsArgs,
    args: PlasmicValidationResultIcon__ArgsType
  ) {
    super(variants, args, PlasmicValidationResultIcon__RenderFuncs, "root");
  }

  protected create(
    variants: PlasmicValidationResultIcon__VariantsArgs,
    args: PlasmicValidationResultIcon__ArgsType
  ) {
    return new PlasmicValidationResultIcon__Renderer(variants, args);
  }

  getInternalVariantProps() {
    return ["status"];
  }

  getInternalArgProps() {
    return [];
  }

  forNode(
    name: "root"
  ): NodeRenderer<typeof PlasmicValidationResultIcon__RenderFuncs["root"]>;
  forNode(
    name: "box"
  ): NodeRenderer<typeof PlasmicValidationResultIcon__RenderFuncs["box"]>;
  forNode(name: keyof typeof PlasmicValidationResultIcon__RenderFuncs) {
    return super.forNode(name);
  }
}

interface PlasmicValidationResultIconRootProps {
  variants?: PlasmicValidationResultIcon__VariantsArgs;
  args?: Partial<PlasmicValidationResultIcon__ArgsType>;
  root?: Flex<"div">;
  box?: Flex<"div">;
}

export const PlasmicValidationResultIcon = ((
  props: PlasmicValidationResultIconRootProps
) => {
  return new PlasmicValidationResultIcon__Renderer(
    props.variants || {},
    props.args || {}
  )
    .forNode("root")
    .withOverrides({
      root: props.root,
      box: props.box
    })
    .render();
}) as React.FunctionComponent<PlasmicValidationResultIconRootProps> & {
  box: React.FunctionComponent<PlasmicValidationResultIconBoxProps>;
  createRenderer: () => PlasmicValidationResultIcon__Renderer;
};

interface PlasmicValidationResultIconBoxProps {
  variants?: PlasmicValidationResultIcon__VariantsArgs;
  args?: Partial<PlasmicValidationResultIcon__ArgsType>;
  box?: Flex<"div">;
}

PlasmicValidationResultIcon.box = ((
  props: PlasmicValidationResultIconBoxProps
) => {
  return new PlasmicValidationResultIcon__Renderer(
    props.variants || {},
    props.args || {}
  )
    .forNode("box")
    .withOverrides({
      box: props.box
    })
    .render();
}) as React.FunctionComponent<PlasmicValidationResultIconBoxProps>;

PlasmicValidationResultIcon.createRenderer = () =>
  new PlasmicValidationResultIcon__Renderer({}, {});

export default PlasmicValidationResultIcon;
/* prettier-ignore-end */
